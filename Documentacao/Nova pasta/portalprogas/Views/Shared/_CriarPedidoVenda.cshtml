@using Progas.Portal.Common
@using Progas.Portal.UI.Helpers
@using Progas.Portal.ViewModel
@model PedidoVendaCadastroVm


<title>@ViewBag.Title</title>

<link href="@Url.Content("~/Content/kendo/2012.3.1114/kendo.common.min.css")" rel="stylesheet" />
<link href="@Url.Content("~/Content/kendo/2012.3.1114/kendo.default.min.css")" rel="stylesheet" />
<link href="@Url.Content("~/Content/jquery.loadmask.css")" rel="stylesheet" />

<div class="paginaCadastro">
    @using (Html.BeginForm())
    {
        <!-- Realiza a pequisa de cotações para carregar seus dados -->           
        <fieldset>
            <legend>Pesquisa Cotação</legend> 
                <div id="Copiar" class="divBotaoCopiar">
                    <div class="coluna">
                        @Html.LabelFor(x => x.id_cotacao)
                        @Html.TextBoxFor(x => x.id_cotacao)
                        @Html.ValidationMessageFor(x => x.id_cotacao)
                    </div>
                    <div class="coluna">
                        @Html.LabelFor(x => x.status)
                        @Html.TextBoxFor(x => x.status,new{@readonly=true,@class="campoDesabilitado campomedio"})
                        @Html.ValidationMessageFor(x => x.status)
                    </div>
                    <div class="coluna">
                        <input type="button" id="btnCopiar" value="Copiar" class="blue" />
                        <input type="button" id="btnNovo"   value="Novo"   class="blue" />
                    </div>
                </div>                                 
        </fieldset>
        <!-- Dados do Header-->   
        <fieldset>
           <legend>Dados de Cabeçalho</legend>
            <div id="Cabecalho">               
                  <!-- Linhas do forms -->                         
                  <div class="linha">
                       @{ var CodigoTipoPedido = new ColunaComDropDown<PedidoVendaCadastroVm, string>
                                         (x => x.CodigoTipoPedido, ((List<TipoPedidoCadastroVm>)ViewBag.TipoPedidos)
										      .Select(x => new SelectListItem()
										      {
											      Text = x.Descricao,
                                                  Value = Convert.ToString(x.Codigo),
                                                  Selected = Model != null && x.Codigo == Model.CodigoTipoPedido
										      }
                                                      ), "CodigoTipoPedido"
													      ); 
					   }  
                      <div class="coluna"> 
                         @Html.LinhaComUmaColuna(CodigoTipoPedido)                    
                     </div>
                  
                     <!-- CondicaoDePagamentoCadastroVm     =  View que sera utilizada para carregar os valores da Query -->
                     <!-- PedidoVendaCadastroVm  - condpgto =  Campo que recebe o valor do select -->   
                      @{ var condpgto = new ColunaComDropDown<PedidoVendaCadastroVm, string>
                                         (x => x.condpgto, ((List<CondicaoDePagamentoCadastroVm>)ViewBag.CondicoesDePagamento)
										      .Select(x => new SelectListItem()
										      {
											      Text = x.Descricao,
                                                  Value = Convert.ToString(x.Codigo),
                                                  Selected = Model != null && x.Codigo == Model.condpgto
										      }
                                                      ), "condpgto"
													      ); 
				      }                                      
                     <div class="coluna">   
                         @Html.LinhaComUmaColuna(condpgto)   
                     </div>   
                                  
                      <div class="coluna" >
                          @Html.LabelFor(x => x.datap)
                          @Html.TextBoxFor(x => x.datap,new{@class="campoDatePicker maskdata"})
                          @Html.ValidationMessageFor(x => x.datap)
                      </div>    
                      <div class="coluna">
                            @Html.LabelFor(x => x.id_pedido)
                            @Html.TextBoxFor(x => x.id_pedido,"campomedio") 
                            @Html.ValidationMessageFor(x => x.id_pedido)
                       </div>                                                                                                                     
                  </div>                                                       
                  <div class="linha">
                      <!-- Campo de Fornecedor transportadora--> 
                      <div class="coluna" >                
                          @Html.Hidden("CodigoFornecedor")
                          @Html.LabelFor(x => x.trans)
                          @Html.TextBoxFor(x => x.trans, new {  @readonly = true, @class = "campomedio campoDesabilitado" })
                          <input type="button" id="btnSelecionarFornecedor" class="button_visualize" />        
                          @Html.ValidationMessageFor(x => x.trans)                                     
                          @Html.ValidationSummary(true)                         
                          <div class="error"></div>   
                      </div> 
                      <!-- Campo de Transportadora Redespacho--> 
                      <div class="coluna" >                                                            
                          @Html.Hidden("Codigotransred")
                          @Html.LabelFor(x => x.transred)
                          @Html.TextBoxFor(x => x.transred, new { @readonly = true, @class = "campomedio campoDesabilitado" })
                          <input type="button" id="btnSelecionarTransred" class="button_visualize" />        
                          @Html.ValidationMessageFor(x => x.transred)                                                              
                          @Html.ValidationSummary(true)
                          <div class="error"></div>     
                      </div>
                      <!-- Campo de Transportadora Redespacho Cif--> 
                      <div class="coluna" >                
                          @Html.Hidden("Codigotransredcif")
                          @Html.LabelFor(x => x.transredcif)
                          @Html.TextBoxFor(x => x.transredcif, new { @readonly = true, @class = "campomedio campoDesabilitado" })
                          <input type="button" id="btnSelecionarTransredCif" class="button_visualize" />        
                          @Html.ValidationMessageFor(x => x.transredcif)                                                              
                          @Html.ValidationSummary(true)
                          <div class="error"></div>     
                      </div> 
                  
                  </div>
                  <div class="linha">
                  
                          @{ var inco1 = new ColunaComDropDown<PedidoVendaCadastroVm, string> 
                                 (x => x.inco1,((List<IncotermCadastroVm>)ViewBag.Incoterms)
                                      .Select(x => new SelectListItem()
                                      {
                                          Text = x.Descricao,
                                          Value = Convert.ToString(x.CodigoIncoterm),
                                          Selected = Model != null && x.CodigoIncoterm == Model.inco1
                                      }
                                              ), "Inco1"
                                                  ); 
                           } 
                      <div class="coluna">                         
                           @Html.LinhaComUmaColuna(inco1)
                      </div>            
                    
                     
                          @{ var inco2 = new ColunaComDropDown<PedidoVendaCadastroVm, string> 
                                 (x => x.inco2,((List<IncotermCadastroVm>)ViewBag.Incoterms)
                                      .Select(x => new SelectListItem()
                                      {
                                          Text = x.Descricao,
                                          Value = Convert.ToString(x.CodigoIncoterm),
                                          Selected = Model != null && x.CodigoIncoterm == Model.inco2
                                      }
                                              ), "Inco2"
                                                  ); 
                           }
                      <div class="coluna"> 
                          @Html.LinhaComUmaColuna(inco2)
                      </div>

                      @{ var id_cliente = new ColunaComDropDown<PedidoVendaCadastroVm, string>
                                         (x => x.id_cliente, ((List<ClienteCadastroVm>)ViewBag.Clientes)
										      .Select(x => new SelectListItem()
										      {
                                                  Text = x.nome,
                                                  Value = Convert.ToString(x.id_cliente),                                                  
                                                  Selected = Model != null && x.id_cliente == Model.id_cliente
										      }
                                                      ), "id_cliente"
													      ); 
				      }
                      <div class="coluna">   
                          @Html.LinhaComUmaColuna(id_cliente)
                      </div>

                      @{ var id_centro = new ColunaComDropDown<PedidoVendaCadastroVm, string>
                                         (x => x.id_centro, ((List<MaterialCadastroVm>)ViewBag.Centro)
										      .Select(x => new SelectListItem()
										      {
                                                  Text = x.Centro,
                                                  Value = Convert.ToString(x.Centro),
                                                  Selected = Model != null && x.Centro == Model.id_centro
										      }
                                                      ), "id_centro"
													      ); 
				      }
                      <div class="coluna">   
                          @Html.LinhaComUmaColuna(id_centro)
                      </div>                                                                                                                
                  </div> 
                </div> 
                  <div class="linha">
                      <div class="coluna">
                          @Html.LabelFor(x => x.obs)
                          @Html.TextBoxFor(x => x.obs,"campomedio") 
                          @Html.ValidationMessageFor(x => x.obs)   
                      </div>
                      <div class="coluna">
                            @Html.LabelFor(x => x.motrec)
                            @Html.TextBoxFor(x => x.motrec,new{@readonly=true,@class="campoDesabilitado campomedio"})
                            @Html.ValidationMessageFor(x => x.motrec)   
                       </div>
                   </div>
                              
                  <div class="divBotaoGravar">
                     <input type="button" id="btnSimular"             value="Simular"          class="blue"/>
                     <input type="button" id="btnSimularEdicao"       value="Simular Edição"   class="blue"/>
                     <input type="button" id="btnGravar"              value="Gravar"           class="blue"/>
                     <input type="button" id="btnGravarEdicao"        value="Gravar Edição"    class="blue"/>
                     <input type="button" id="btnAdicionarFornecedor" value="Adicionar"        class="blue" />
                     <input type="button" id="btnCancelarEdicao"      value="Cancelar" @*style="visibility: hidden"*@ class="blue" />
                  </div>                                 
              
        </fieldset>
        <!-- Dados das Linhas--> 
        <fieldset>
            <legend>Dados de Itens</legend>                
              <div id="Linha">           
                    <div class="linha">
                        @{ var Id_material = new ColunaComDropDown<PedidoVendaCadastroVm, string>
                                         (x => x.id_material, ((List<MaterialCadastroVm>)ViewBag.Materiais).OrderBy(l => l.Descricao)
										      .Select(x => new SelectListItem()
										      {
                                                  Text = x.UnidadeMedida + " - " +x.Descricao,
                                                  Value = Convert.ToString(x.Id_material),
                                                  Selected = Model != null && x.Id_material == Model.id_material
										      }
                                                      ), "Id_material"
													      ); 
				         }

                        <div class="coluna">   
                             @Html.LinhaComUmaColuna(Id_material)
                        </div>
                        <div class="coluna">
                            @Html.LabelFor(x => x.Quant)
                            @Html.TextBoxFor(x => x.Quant, new{@class="maskquantidade"})
                            @Html.ValidationMessageFor(x => x.Quant)
                         </div>

                         <!--{ var um = new ColunaComDropDown<PedidoVendaCadastroVm, string>
                                         (x => x.CodigoUnidadeMedida, ((List<UnidadeDeMedidaCadastroVm>)ViewBag.UnidadesDeMedida)
										      .Select(x => new SelectListItem()
										      {
                                                  Text = x.Descricao,
                                                  Value = Convert.ToString(x.Id_unidademedida),
                                                  Selected = Model != null && x.Id_unidademedida == Model.CodigoUnidadeMedida
										      }
                                                      ), "um"
													      ); 
				         }
                         <div class="coluna">   
                               Html.LinhaComUmaColuna(um)
                         </div>-->  
                    
                         @{ var listapreco = new ColunaComDropDown<PedidoVendaCadastroVm, string>
                                             (x => x.listpre, ((List<ListaPrecoCadastroVm>)ViewBag.ListaPreco)
										          .Select(x => new SelectListItem()
										          {
                                                      Text = x.Descricao,
                                                      Value = Convert.ToString(x.Codigo),
                                                      Selected = Model != null && x.Codigo == Model.listpre
										          }
                                                          ), "listapreco"
													          ); 
				         }
                                       
                         <div class="coluna">   
                             @Html.LinhaComUmaColuna(listapreco)
                         </div>  
                        <div class="coluna">
                            @Html.LabelFor(x => x.descma)
                            @Html.TextBoxFor(x => x.descma, new{@class="maskmoeda"})
                            @Html.ValidationMessageFor(x => x.descma)
                        </div>                                        
                    </div>
                  </div>          
        </fieldset>                
        <fieldset>
            <legend>Grid de Linhas</legend> 
                <div @*class="divGrid"*@>
                    <div id="gridFornecedoresAdicionados" style="width: 785px" class="divGrid" ></div>    
                </div>
        </fieldset>
        

    }
        <!-- Div da janela de Tipo de Pedido-->  
        <div id="divSelecionarTipoPedido" class="janelaModal"></div>
</div>

@section scripts
{
    @Scripts.Render("~/bundles/jqueryval")
    <script type="text/javascript" src="@Url.Content("~/Scripts/kendo/2012.3.1114/kendo.web.min.js")"></script>
    <script type="text/javascript" src="@Url.Content("~/Scripts/kendo/2012.3.1114/kendo.grid.min.js")"></script>
    <script type="text/javascript" src="@Url.Content("~/Scripts/jquery.maskedinput.js")"></script>
    <script type="text/javascript" src="@Url.Content("~/Scripts/jquery.meio.mask.js")"></script>
    <script type="text/javascript" src="@Url.Content("~/Scripts/Shared/SelecionarFornecedor.js")"></script>
    <script type="text/javascript" src="@Url.Content("~/Scripts/Shared/SelecionarTransRedespacho.js")"></script>
    <script type="text/javascript" src="@Url.Content("~/Scripts/Shared/SelecionarTransRedespachoCif.js")"></script>
    <script type="text/javascript">
        
        // array das linhas
        var fornecedoresAdicionados = new Array();        
        var quantidadeDeFornecedoresIniciais = 0;
        var indiceEdicao = -1;
        var status  = 0;
        var simular = "S"
        var gravar  = "G";
        
        

        $(function () {
            aplicaMascaraData();
            aplicaMascaraQuantidade();
            SelecionarFornecedor.Configurar();
            SelecionarTransRedespacho.Configurar();
            SelecionarTransRedespachoCif.Configurar();            

            // botao de edicao nas linhas do grid
            $('#btnCancelarEdicao').hide();

            // Botao de editar Pedido
            $('#btnGravarEdicao').hide();
            $('#btnSimularEdicao').hide();

            function existeQuota(quota) {
                var quotaEncontrada = false;
                $.each(fornecedoresAdicionados, function (indice, fornecedor) {
                    if (quotaEncontrada) {
                        return;
                    }
                    if (indice == indiceEdicao) {
                        return;
                    }
                });
                return quotaEncontrada;
            }

            function atualizaGrid() {
                var grid = $("#gridFornecedoresAdicionados").data("kendoGrid");
                grid.dataSource.read();
            }

            // Finaliza a edicao na linha do grid
            function encerrarEdicao() {
                indiceEdicao = -1;
                $('#btnAdicionarFornecedor').val('Adicionar');
                $('#btnCancelarEdicao').hide();
            }

            $('#btnCancelarEdicao').click(function () {
                encerrarEdicao();
            });

            // Adiciona linha ao grid
            $('#btnAdicionarFornecedor').click(function () {
                var form = $('form');
                if (!$(form).validate().form()) {
                    return;
                }                

                // grava a linha no array de fornecedor
                // Array que sera enviado para o controller que salva os pedidos
                var fornecedor = {
                    CodigoMaterial:         $('#Id_material :selected').val(),
                    DescricaoMaterial:      $('#Id_material :selected').text(),
                    Quantidade:             $('#Quant').val(),
                    listpre:                $('#listapreco :selected').val(),
                    Descricaolistpre:       $('#listapreco :selected').text(),
                    //Valtab:                $('#valtab').val(), // valor do SAP
                    //Valpol:                $('#valpol').val(), // valor do SAP
                    Desconto:               $('#descma').val()//,
                    //Valfin:                 $('#valfin').val(), // valor do SAP
                    //Ordem:                  $('#ordem :selected').val(), // valor do SAP
                    //Motrec:                 $('#motrec :selected').val()// valor do SAP
                };

                // grava na variavel fornecedoresAdicionados os dados que seram manipulados antes de serem salvos
                if (indiceEdicao == -1) {
                    fornecedoresAdicionados.push(fornecedor);

                } else {
                    // array que sera exibido no grid
                    fornecedoresAdicionados[indiceEdicao] = fornecedor;
                    encerrarEdicao();
                }

                atualizaGrid();
            });

            // exibe os valores no grid 
            // quota. campo
            $('#gridFornecedoresAdicionados').kendoGrid({
                dataSource: {
                    schema: {
                        data: function () { return fornecedoresAdicionados; },
                        model: {
                            id: 'Codigo',
                            fields: {                                
                                CodigoMaterial:         { type: "string" },
                                DescricaoMaterial:      { type: "string" },
                                Quantidade:             { type: "number" },
                                //CodigoUnidadeMedida:    { type: "string" },
                                //DescricaoUnidadeMedida: { type: "string" },
                                listpre:                { type: "string" },
                                Descricaolistpre:       { type: "string" },
                                //Valtab:                 { type: "number" },
                                //Valpol:                 { type: "number" },
                                Desconto:               { type: "number" }//,
                                //Valfin:                 { type: "number" },
                                //Ordem:                  { type: "string" },
                                ///Motrec                  { type: "string" }
                            }
                        }
                    }
                },
                sortable: false,
                selectable: 'row',
                columns:
                [
                    {
                        title: ' ', /*coloco um espaço para deixar o header sem título*/
                        width: 8,
                        sortable: false,
                        template: '<input type="button" class="button_edit" data-codigofornecedor="${""}"></input>'
                    },

                    {
                        title: ' ', /*coloco um espaço para deixar o header sem título*/
                        width: 8,
                        sortable: false,
                        template: '<input type="button" class="button_remove" data-codigofornecedor="${""}"></input>'
                    },                   
                    {
                        field: "DescricaoMaterial",
                        width: 60,             
                        title: "Material"
                    },

                    {
                        width: 30,
                        field: "Quantidade",
                        title: "Qt"
                    },
                    
                    //{
                    //    width: 30, 
                    //    field: "DescricaoUnidadeMedida",
                    //    title: "UM"
                    //},

                    {
                        field: "Descricaolistpre",
                        width: 30,
                        title: "Lista"
                    },

                    /*{
                        field: "Valtab",
                        width: 30,
                        title: "Val Tabela"
                    },

                    {
                        field: "Valpol",
                        width: 30,
                        title: "Val Politica"
                    },*/

                    {
                        field: "Desconto",
                        width: 30,
                        title: "Desc Manual"
                    }/*,

                    {
                        field: "Valfin",
                        width: 30,
                        title: "Val Fim"
                    },

                    {
                        field: "Ordem",
                        width: 30,
                        title: "Ordem"
                    },

                    {
                        field: ":Motrec",
                        width: 30,
                        title: "Mot.Rec"
                    }*/

                ]
            });

            // botao de remover a linha do grid
            $('#gridFornecedoresAdicionados').find('.button_remove').die('click');

            // funcao do botao de remover a linha do grid
            $('#gridFornecedoresAdicionados').find('.button_remove').live('click', function () {
                var indice = $(this).parents('tr:first')[0].rowIndex;
                fornecedoresAdicionados.splice(indice, 1);
                atualizaGrid();
            });

            // botao de adicionar linha ao grid
            $('#gridFornecedoresAdicionados').find('.button_edit').die('click');

            // funcao de adicionar linha ao grid
            $('#gridFornecedoresAdicionados').find('.button_edit').live('click', function () {
                indiceEdicao = $(this).parents('tr:first')[0].rowIndex;
                var quota = fornecedoresAdicionados[indiceEdicao];

                // Campo da view( #Material) - Campo do select(val(quota.CodigoMaterial))
                $('#Id_material').val(quota.CodigoMaterial);
                $('#Quant').val(quota.Quantidade);
                //$('#um').val(quota.UnidadeMedida);
                $('#listapreco').val(quota.listapreco);
                $('#descma').val(quota.Desconto);

                $('#btnAdicionarFornecedor').val('Atualizar');
                $('#btnCancelarEdicao').show();
            });                                           


            //
            // Funcao do Botao de Simular o Pedido
            //
            $('#btnSimular').click(function () {
                if (quantidadeDeFornecedoresIniciais == 0 && fornecedoresAdicionados.length == 0) {
                    Mensagem.ExibirMensagemDeErro('Deve ser adicionado pelo menos um Item antes de salvar.');
                    return;
                }

                // Grava no array os dados que serão salvos
                var quotasParaSalvar = new Array();
                $.each(fornecedoresAdicionados, function (indice, quota) {
                    quotasParaSalvar.push({
                        tipo: simular,
                        CodigoTipoPedido: $('#CodigoTipoPedido').val(),
                        CodigoCondpgto: $('#condpgto').val(),
                        datap: $('#datap').val(),
                        NumeroPedido: $('#id_pedido').val(),
                        Trans: $('#CodigoFornecedor').val(),
                        Transred: $('#Codigotransred').val(),
                        Transredcif: $('#Codigotransredcif').val(),
                        Cliente: $('#id_cliente').val(),
                        Centro: $('#id_centro').val(),
                        Inco1: $('#Inco1').val(),
                        Inco2: $('#Inco2').val(),
                        Observacao: $('#obs').val(),
                        // linhas
                        CodigoMaterial: quota.CodigoMaterial,
                        Quantidade: quota.Quantidade,
                        //UnidadeMedida:    quota.CodigoUnidadeMedida,
                        listapreco: quota.listpre,
                        Desconto: quota.Desconto
                    });
                });


                //
                // Chamada do Controller reponsalvel por salvar o pedido.                
                $.ajax({
                    url: '@Url.Action("Salvar", "PedidoVendaSalvar")',
                    type: 'POST',
                    cache: false,
                    data: JSON.stringify({ Pedido: quotasParaSalvar }),
                    contentType: "application/json; charset=utf-8",
                    dataType: 'json',
                    success: function (data) {
                        if (data.Sucesso) {
                            Mensagem.ExibirMensagemDeSucesso("A Simulação do pedido foi salva com sucesso.");
                            quantidadeDeFornecedoresIniciais = fornecedoresAdicionados.length;
                            return;
                        } else {
                            Mensagem.ExibirMensagemDeErro(data.Mensagem + ' Erro ao Inserir os itens');
                        }

                    },
                    error: function (jqXHR, textStatus, errorThrown) {
                        Mensagem.ExibirMensagemDeErro('Ocorreu um erro ao consultar as linhas. Detalhe: ' + textStatus + errorThrown);
                    }
                });

            });


            //
            // Funcao do Botao de salvar o Pedido
            //
            $('#btnGravar').click(function () {
                if (quantidadeDeFornecedoresIniciais == 0 && fornecedoresAdicionados.length == 0) {
                    Mensagem.ExibirMensagemDeErro('Deve ser adicionado pelo menos um Item antes de salvar.');
                    return;
                }        

                // Grava no array os dados que serão salvos
                var quotasParaSalvar = new Array();
                $.each(fornecedoresAdicionados, function (indice, quota) {
                    quotasParaSalvar.push({
                        tipo:             gravar,
                        CodigoTipoPedido: $('#CodigoTipoPedido').val(),
                        CodigoCondpgto:   $('#condpgto').val(),
                        datap:            $('#datap').val(),
                        NumeroPedido:     $('#id_pedido').val(),
                        Trans:            $('#CodigoFornecedor').val(),
                        Transred:         $('#Codigotransred').val(),
                        Transredcif:      $('#Codigotransredcif').val(),
                        Cliente:          $('#id_cliente').val(),
                        Centro:           $('#id_centro').val(),
                        Inco1:            $('#Inco1').val(),
                        Inco2:            $('#Inco2').val(),
                        Observacao:       $('#obs').val(),
                        // linhas
                        CodigoMaterial:   quota.CodigoMaterial,
                        Quantidade:       quota.Quantidade,
                        //UnidadeMedida:    quota.CodigoUnidadeMedida,
                        listapreco:       quota.listpre,
                        Desconto:         quota.Desconto                        
                    });                   
                });


                //
                // Chamada do Controller reponsalvel por salvar o pedido.                
                $.ajax({
                    url: '@Url.Action("Salvar", "PedidoVendaSalvar")',
                    type: 'POST',
                    cache: false,
                    data: JSON.stringify({ Pedido: quotasParaSalvar}),
                    contentType: "application/json; charset=utf-8",
                    dataType: 'json',
                    success: function (data) {
                        if (data.Sucesso) {
                            Mensagem.ExibirMensagemDeSucesso("O pedido foi gravado com sucesso.");
                            quantidadeDeFornecedoresIniciais = fornecedoresAdicionados.length;
                            return;
                        } else {
                            Mensagem.ExibirMensagemDeErro(data.Mensagem + ' Erro ao Inserir os itens' );
                        }

                    },
                    error: function (jqXHR, textStatus, errorThrown) {
                        Mensagem.ExibirMensagemDeErro('Ocorreu um erro ao consultar as linhas. Detalhe: ' + textStatus + errorThrown);
                    }
                });

            });

            function habilitarCampoData() {
                $('#Data')
                    .attr('readonly', false)
                    .removeClass('campoDesabilitado')
                    .val('');

                $("#Data").datepicker();
            }

            //
            // Funcao do Botao que limpa os dados campos e do Grid
            //
            $('#btnNovo').click(function () {
                habilitarCampoData();
                fornecedoresAdicionados = [];                
                $('#Copiar').find('input[type!=button]').val('');
                $('#Cabecalho').find('input[type!=button]').val('');
                $("#CodigoTipoPedido").prop('selectedIndex', 0);
                $("#condpgto").prop('selectedIndex', 0);
                $("#Inco1").prop('selectedIndex', 0);
                $("#Inco2").prop('selectedIndex', 0);
                $("#id_cliente").prop('selectedIndex', 0);
                $("#condpgto").prop('selectedIndex', 0);
                $("#id_centro").prop('selectedIndex', 0);                
                $('#Linha').find('input[type!=button]').val('');
                $("#Id_material").prop('selectedIndex', 0);
                $("#obs").prop('selectedIndex', 0);
                $("#listapreco").prop('selectedIndex', 0);
                //$('#obs').find('input[type!=button]').val('');
                atualizaGrid();
                $('form').find('input[type!=button]').val();
            });
            //
            // Fim da funcao de Limpas os dados da Tela
            //


            //
            // Funcao do Botao que copia os dados de uma cotacao para tela.
            // 
            $('#btnCopiar').click(function () {
                // Grava o o numero da cotacao
                var id_cotacao = $('#id_cotacao').val();
                

                // Verifica se foi digitado o numero da Cotacao
                if (id_cotacao == 0) {
                    Mensagem.ExibirMensagemDeErro('Deve ser digito o numero da Cotação para a pesquisa.');
                    return;
                }
                // limpa o valor dos campos para depois carregar os dados da cotacao pesquisada
                $('#btnNovo').click();

                //
                // Chamada do Controller reponsalvel por copiar o Cabecalho da cotacao.
                $.ajax({
                    url: '@Url.Action("ConsultarCotacao", "PedidoVenda")',
                    type: 'POST',
                    cache: false,
                    data: JSON.stringify({ cotacao: id_cotacao }),
                    contentType: "application/json; charset=utf-8",
                    dataType: 'json',
                    success: function (data) {                        

                        //$('#divSelecionarFornecedor').val(data.trans);
                        var status_gravado   = "Gravado";
                        var status_simulacao = "Simulação";
                        
                        // Valida o Status
                        if (data.Tipo == "G")
                        {
                            //Mensagem.ExibirMensagemDeErro("Gravado");
                            $('#status').val(status_gravado);
                        }

                        if (data.Tipo == "S") {
                            //Mensagem.ExibirMensagemDeErro("Simualado");
                            $('#status').val(status_simulacao);
                        }                       

                        $('#CodigoTipoPedido').val(data.CodigoTipoPedido);
                        $('#condpgto').val(data.condpgto);
                        $('#datap').val(data.datap);
                        $('#id_pedido').val(data.id_pedido);
                        $('#trans').val(data.trans);
                        $('#transred').val(data.transred);
                        $('#transredcif').val(data.transredcif);
                        $('#id_cliente').val(data.id_cliente);
                        $('#id_centro').val(data.id_centro);
                        $('#Inco1').val(data.inco1);
                        $('#Inco2').val(data.inco2);
                        $('#obs').val(data.obs);

                    },
                    error: function (jqXHR, textStatus, errorThrown) {
                        Mensagem.ExibirMensagemDeErro('Ocorreu um erro ao consultar os dados da Contacao: ' + textStatus + errorThrown);
                    }
                });

                //
                // Chamada do Controller reponsalvel por copiar as linhas da cotacao gravando no Grid.
                $.ajax({
                    url: '@Url.Action("ConsultarLinhasCotacao", "PedidoVenda")' + '?cotacao=' + id_cotacao,
                    type: 'POST',
                    //cache: false,
                    data: JSON.stringify({ dados: id_cotacao }),
                    contentType: "application/json",
                    //dataType: 'json',
                    success: function (data) {
                        $.each(data, function (index, value) {
                            //alert(value.id_material, value.id_cotacao);

                            $('#Id_material').val(value.id_material);
                            $('#Quant').val(value.Quant);
                            $('#listapreco').val(value.listpre);
                            $('#descma').val(value.descma);

                            $('#btnAdicionarFornecedor').click();
                                                                        
                        });

                      },
                    error: function (jqXHR, textStatus, errorThrown) {
                        Mensagem.ExibirMensagemDeErro('Ocorreu um erro ao consultar as Linhas da Contacao: ' + textStatus + errorThrown);
                    }
                });
                
            });
            //
            // Fim funcao Copiar
            //

            //
            // Editar Pedido
            //
            if ('@ViewBag.Pedido' != 0) {

                // Desabita Botao de Salvar e Simular Pedido
                $('#btnGravar').hide();
                $('#btnSimular').hide();

                // Habilita Botao de Salvar e Simular  Edicao
                $('#btnGravarEdicao').show();
                $('#btnSimularEdicao').show();

                // Executa funcao de copiar dados da cotacao que sera atualizada para Tela
                var cotacao = '@ViewBag.Pedido';
                $('#id_cotacao').val(cotacao);
                $('#btnCopiar').click();

                // Retorna os dados do pedido para Atualizar Pedido

                //
                // Funcao do Botao de salvar o Pedido
                //
                $('#btnGravarEdicao').click(function () {
                    if (quantidadeDeFornecedoresIniciais == 0 && fornecedoresAdicionados.length == 0) {
                        Mensagem.ExibirMensagemDeErro('Deve ser adicionado pelo menos um Item antes de Gravar a Edição.');
                        return;
                    }

                    // Grava no array os dados que serão salvos
                    var quotasParaSalvar = new Array();

                    /*var numeroPedido = $('#id_pedido').val().trim();*/
                    var pedido = $('#id_pedido').val()

                    var numeroPedido = rtrim(pedido);
                    
                    $.each(fornecedoresAdicionados, function (indice, quota) {
                        quotasParaSalvar.push({
                            // cabecalho
                            tipo:             gravar,
                            Id_cotacao:       $('#id_cotacao').val(),
                            CodigoTipoPedido: $('#CodigoTipoPedido').val(),
                            CodigoCondpgto:   $('#condpgto').val(),
                            datap:            $('#datap').val(),
                            NumeroPedido:     numeroPedido,//$('#id_pedido').val(),
                            Trans:            $('#CodigoFornecedor').val(),
                            Transred:         $('#Codigotransred').val(),
                            Transredcif:      $('#Codigotransredcif').val(),
                            Cliente:          $('#id_cliente').val(),
                            Centro:           $('#id_centro').val(),
                            Inco1:            $('#Inco1').val(),
                            Inco2:            $('#Inco2').val(),
                            Observacao:       $('#obs').val(),
                            // linhas
                            CodigoMaterial:   quota.CodigoMaterial,
                            Quantidade:       quota.Quantidade,
                            //UnidadeMedida:    quota.CodigoUnidadeMedida,
                            listapreco:       quota.listpre,
                            Desconto:         quota.Desconto
                        });
                    });


                    //
                    // Chamada do Controller reponsalvel por salvar o pedido.                
                    $.ajax({
                        url: '@Url.Action("Atualizar", "PedidoVendaSalvar")',
                    type: 'POST',
                    cache: false,
                    data: JSON.stringify({ Pedido: quotasParaSalvar }),
                    contentType: "application/json; charset=utf-8",
                    dataType: 'json',
                    success: function (data) {
                        if (data.Sucesso) {
                            Mensagem.ExibirMensagemDeSucesso("A edição do pedido foi gravada com sucesso.");
                            quantidadeDeFornecedoresIniciais = fornecedoresAdicionados.length;
                            return;
                        } else {
                            Mensagem.ExibirMensagemDeErro(data.Mensagem + ' Erro ao Atualizar os itens');
                        }

                    },
                    error: function (jqXHR, textStatus, errorThrown) {
                        Mensagem.ExibirMensagemDeErro('Ocorreu um erro ao consultar as linhas. Detalhe: ' + textStatus + errorThrown);
                    }
                });

                });

                //
                // Funcao do Botao de salvar o Pedido
                //
                $('#btnSimularEdicao').click(function () {
                    if (quantidadeDeFornecedoresIniciais == 0 && fornecedoresAdicionados.length == 0) {
                        Mensagem.ExibirMensagemDeErro('Deve ser adicionado pelo menos um Item antes de Simular a Edição.');
                        return;
                    }

                    // Grava no array os dados que serão salvos
                    var quotasParaSalvar = new Array();

                    /*var numeroPedido = $('#id_pedido').val().trim();*/
                    var pedido = $('#id_pedido').val()

                    var numeroPedido = rtrim(pedido);

                    $.each(fornecedoresAdicionados, function (indice, quota) {
                        quotasParaSalvar.push({
                            // cabecalho
                            tipo: simular,
                            Id_cotacao: $('#id_cotacao').val(),
                            CodigoTipoPedido: $('#CodigoTipoPedido').val(),
                            CodigoCondpgto: $('#condpgto').val(),
                            datap: $('#datap').val(),
                            NumeroPedido: numeroPedido,//$('#id_pedido').val(),
                            Trans: $('#CodigoFornecedor').val(),
                            Transred: $('#Codigotransred').val(),
                            Transredcif: $('#Codigotransredcif').val(),
                            Cliente: $('#id_cliente').val(),
                            Centro: $('#id_centro').val(),
                            Inco1: $('#Inco1').val(),
                            Inco2: $('#Inco2').val(),
                            Observacao: $('#obs').val(),
                            // linhas
                            CodigoMaterial: quota.CodigoMaterial,
                            Quantidade: quota.Quantidade,
                            //UnidadeMedida:    quota.CodigoUnidadeMedida,
                            listapreco: quota.listpre,
                            Desconto: quota.Desconto
                        });
                    });


                    //
                    // Chamada do Controller reponsalvel por salvar o pedido.                
                    $.ajax({
                        url: '@Url.Action("Atualizar", "PedidoVendaSalvar")',
                        type: 'POST',
                        cache: false,
                        data: JSON.stringify({ Pedido: quotasParaSalvar }),
                        contentType: "application/json; charset=utf-8",
                        dataType: 'json',
                        success: function (data) {
                            if (data.Sucesso) {
                                Mensagem.ExibirMensagemDeSucesso("A Simulacão do pedido foi gravada com sucesso.");
                                quantidadeDeFornecedoresIniciais = fornecedoresAdicionados.length;
                                return;
                            } else {
                                Mensagem.ExibirMensagemDeErro(data.Mensagem + ' Erro ao Atualizar os itens');
                            }

                        },
                        error: function (jqXHR, textStatus, errorThrown) {
                            Mensagem.ExibirMensagemDeErro('Ocorreu um erro ao consultar as linhas. Detalhe: ' + textStatus + errorThrown);
                        }
                    });

                });
                
            }
            //
            // Fim Editar Pedido
            //         

        });
    </script>

}