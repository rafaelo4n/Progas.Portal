@using Progas.Portal.UI.Helpers
@using Progas.Portal.ViewModel
@model PedidoVendaCadastroVm


<title>@ViewBag.Title</title>

<link href="@Url.Content("~/Content/kendo/2012.3.1114/kendo.common.min.css")" rel="stylesheet" />
<link href="@Url.Content("~/Content/kendo/2012.3.1114/kendo.default.min.css")" rel="stylesheet" />
<link href="@Url.Content("~/Content/jquery.loadmask.css")" rel="stylesheet" />

<div class="paginaCadastro">
    @using (Html.BeginForm())
    {
        @Html.HiddenFor(x => x.id_cotacao )
        <!-- Realiza a pequisa de cotações para carregar seus dados -->           
        <fieldset>
            <legend>Pesquisa Cotação</legend> 
            <div id="Copiar" class="divBotaoCopiar linha">
                <div class="coluna3">
                    @Html.LabelFor(x => x.id_cotacao)
                    @Html.TextBox("id_cotacao", "", new { @class = "campopequeno" })
                    <input type="button" id="btnCopiar" value="Copiar" class="blue" />
                    <input type="reset" id="btnNovo"   value="Novo"   class="blue" />
                </div>
                <div class="coluna3">
                    @Html.LabelFor(x => x.status)
                    @Html.TextBoxFor(x => x.status,new{@readonly=true,@class="campoDesabilitado campomedio"})
                </div>
                <div class="coluna3">
                    @Html.LabelFor(x => x.vlrtot)
                    @Html.TextBoxFor(x => x.vlrtot,new{@readonly=true,@class="campoDesabilitado campomedio"})
                </div>
            </div>                                 
        </fieldset>
        <!-- Dados do Header-->   
        <fieldset>
            <legend>Dados de Cabeçalho</legend>
            <div id="Cabecalho">
                
                @{ var codigoTipoPedido = new ColunaComDropDown<PedidoVendaCadastroVm, object>
                       (x => x.CodigoTipoPedido, ((List<TipoPedidoCadastroVm>)ViewBag.TipoPedidos)
                           .Select(x => new SelectListItem()
                           {
                               Text = x.Descricao,
                               Value = Convert.ToString(x.Codigo),
                               Selected = Model != null && x.Codigo == Model.CodigoTipoPedido
                           }
                           ), "CodigoTipoPedido"
                       );

                    var buscaDeCliente = new ColunaComBotaoDeBusca<PedidoVendaCadastroVm, object>
                        (x => x.Cliente.Codigo, new { @class = "campomedio campoDesabilitado" }, "btnBuscarCliente", "button_visualize");                  
                           
                } 
                
                @Html.LinhaComCincoColunas(codigoTipoPedido, buscaDeCliente, 
                new ColunaComTextBox<PedidoVendaCadastroVm, object>(x => x.Cliente.Nome,"campogrande campoDesabilitado"),
             new ColunaComTextBox<PedidoVendaCadastroVm, object>(x => x.Cliente.Cnpj, "campogrande campoDesabilitado"),
             new ColunaComTextBox<PedidoVendaCadastroVm, object>(x => x.Cliente.Telefone, "campogrande campoDesabilitado"))
                
                @Html.HiddenFor(x => x.Cliente.Id)

                
                @{
                    var comboDeAreaDeVendas = new ColunaComDropDown<PedidoVendaCadastroVm, int>
                        (x => x.IdDaAreaDeVenda, new List<SelectListItem>(), "AreaDeVenda");
                           
                    var condpgto = new ColunaComDropDown<PedidoVendaCadastroVm, string>
                        (x => x.condpgto, ((List<CondicaoDePagamentoCadastroVm>)ViewBag.CondicoesDePagamento)
                            .Select(x => new SelectListItem()
                            {
                                Text = string.Format("{0} - {1}",x.Codigo,x.Descricao) ,
                                Value = Convert.ToString(x.Codigo),
                                Selected = Model != null && x.Codigo == Model.condpgto
                            }
                            ), "condpgto"
                        );                            
                }
                
                @Html.LinhaComCincoColunas(comboDeAreaDeVendas,
                    new ColunaComTextBox<PedidoVendaCadastroVm, string>(x => x.id_centro,"campomedio campoDesabilitado"),
                    condpgto,
                    new ColunaComTextBox<PedidoVendaCadastroVm, string>(x => x.datap, "campomedio campoDatePicker maskdata"),
                    new ColunaComTextBox<PedidoVendaCadastroVm, string>(x => x.id_pedido,"campomedio")
                    )
                
                @{
                    var inco1 = new ColunaComDropDown<PedidoVendaCadastroVm, object>
                        (x => x.IdDoIncoterm1, ((List<IncotermsCabCadastroVm>) ViewBag.Incoterms)
                            .Select(x => new SelectListItem()
                            {
                                Text = string.Format("{0} - {1}", x.CodigoIncotermCab, x.Descricao),
                                Value = Convert.ToString(x.Id),
                                Selected = Model != null && Convert.ToString( x.Id) == Model.IdDoIncoterm1
                            }
                            ), "Inco1"
                        );

                    var inco2 = new ColunaComDropDown<PedidoVendaCadastroVm, object>
                        (x => x.IdDoIncoterm2, new List<SelectListItem>(), "Inco2"
                        );

                    var buscaDeTransportadora = new ColunaComBotaoDeBusca<PedidoVendaCadastroVm, object>(x => x.Transportadora.Codigo,
                        new { @readonly = true, @class = "campomedio campoDesabilitado" },"Código Transportadora:", 
                        "btnSelecionarTransportadora", "button_visualize");

                    var campoComNomeDaTransportadora = new ColunaComTextBox<PedidoVendaCadastroVm, object>(x => x.Transportadora.Nome, 
                        new { @class = "campogrande campoDesabilitado" },"Nome Transportadora:");
                       
                }
                
                @*@Html.LinhaComUmaColuna(inco1)*@
                
                @Html.LinhaComQuatroColunas(inco1, inco2, buscaDeTransportadora, campoComNomeDaTransportadora)
                
                @Html.HiddenFor(x => x.Transportadora.Id)
                
                @{
                    var buscaDeTransportadoraDeRedespacho = new ColunaComBotaoDeBusca<PedidoVendaCadastroVm, string>(x => x.TransportadoraDeRedespacho.Codigo,
                        new { @readonly = true, @class = "campomedio campoDesabilitado" },"Código Transp Redespacho:", "btnSelecionarTransportadoraDeRedespacho", "button_visualize");

                    var campoComNomeDaTransportadoraDeRedespacho = new ColunaComTextBox<PedidoVendaCadastroVm, string>(x => x.TransportadoraDeRedespacho.Nome, 
                        new{@class="campogrande campoDesabilitado"} , "Nome Transp Redespacho:");

                    var buscaDeTransportadoraDeRedespachoCif = new ColunaComBotaoDeBusca<PedidoVendaCadastroVm, string>(x => x.TransportadoraDeRedespachoCif.Codigo,
                        new { @readonly = true, @class = "campomedio campoDesabilitado" }, "Cód Transp Redespacho Cif:", "btnSelecionarTransportadoraDeRedespachoCif", "button_visualize");
                    
                    var campoComNomeDaTransportadoraDeRedespachoCif = new ColunaComTextBox<PedidoVendaCadastroVm, string>(x => x.TransportadoraDeRedespachoCif.Nome,
                        new{@class="campogrande campoDesabilitado"} , "Nome Transp Redespacho Cif:");
                    
                }
                
                @Html.LinhaComQuatroColunas(buscaDeTransportadoraDeRedespacho, campoComNomeDaTransportadoraDeRedespacho,buscaDeTransportadoraDeRedespachoCif, campoComNomeDaTransportadoraDeRedespachoCif)
                
                @Html.HiddenFor(x => x.TransportadoraDeRedespacho.Id)
                @Html.HiddenFor(x => x.TransportadoraDeRedespachoCif.Id)
                
                @Html.LinhaComUmaColuna(new ColunaComTextArea<PedidoVendaCadastroVm, string>(x => x.obs))

            </div> 
              
        </fieldset>
        <!-- Dados das Linhas--> 
        <fieldset>
            <legend>Dados de Itens</legend>                
            <div id="Linha">           
                
                    @{ 

                        var buscaDeMaterial = new ColunaComBotaoDeBusca<PedidoVendaCadastroVm, string>(x => x.CodigoDoMaterial, new {@class = "campoDesabilitado campopequeno"}, "btnBuscaMaterial", "button_visualize");
                        var campoDoNomeDoMaterial = new ColunaComTextBox<PedidoVendaCadastroVm, string>(x => x.NomeDoMaterial, new {@class = "campoDesabilitado campogrande"});
                        var campoDaUnidadeDeMedidaDoMaterial = new ColunaComTextBox<PedidoVendaCadastroVm, string>(x => x.CodigoUnidadeMedida, new { @class = "campoDesabilitado campomedio" });
                    }
                
                @Html.LinhaComTresColunas(buscaDeMaterial, campoDoNomeDoMaterial, campoDaUnidadeDeMedidaDoMaterial)  
                @Html.HiddenFor(x => x.IdDoMaterial)
                

                @{ var listapreco = new ColunaComDropDown<PedidoVendaCadastroVm, string>
                           (x => x.CodigoDaListaDePreco, ((List<ListaPrecoCadastroVm>)ViewBag.ListaPreco)
                               .Select(x => new SelectListItem()
                               {
                                   Text = x.Descricao,
                                   Value = Convert.ToString(x.Codigo),
                                   Selected = Model != null && x.Codigo == Model.CodigoDaListaDePreco
                               }
                               ), "CodigoDaListaDePreco"
                           );
}

                @{
                       var motivosDeRecusa = ((List<MotivoDeRecusaVm>)ViewBag.MotivosDeRecusa).Select(x =>
                           new SelectListItem
                           {
                               Value = x.Codigo,
                               Text = x.Descricao,
                               Selected = (Model != null && Model.motrec == x.Codigo)
                           });
                       var comboDeMotivoDeRecusa = new ColunaComDropDown<PedidoVendaCadastroVm, string>(x => x.motrec, motivosDeRecusa, "CodigoDoMotivoDeRecusa");
                }


                
                
                @Html.LinhaComQuatroColunas(new ColunaComTextBox<PedidoVendaCadastroVm, decimal>(x => x.Quant,"maskquantidade campopequeno"),listapreco,
             new ColunaComTextBox<PedidoVendaCadastroVm, string>(x => x.Desconto, "maskquantidade campopequeno")
             , comboDeMotivoDeRecusa)

                <div class="divBotao">
                    <input type="button" id="btnAdicionarItem" value="Adicionar" class="blue" />
                </div>

            </div>          
        </fieldset>                
        <fieldset>
            <legend>Grid de Linhas</legend> 
            <div @*class="divGrid"*@>
                <div id="gridLinhasAdicionadas" style="width: 785px" class="divGrid" ></div>    
            </div>
        </fieldset>
        
        <div class="divBotao">
            <input type="button" id="btnSimular"             value="Simular"          class="blue"/>
            <input type="button" id="btnGravar"              value="Gravar"           class="blue"/>
        </div>

    }
</div>

@section scripts
{
    @Scripts.Render("~/bundles/jqueryval")
    <script type="text/javascript" src="@Url.Content("~/Scripts/kendo/2012.3.1114/kendo.web.min.js")"></script>
    <script type="text/javascript" src="@Url.Content("~/Scripts/kendo/2012.3.1114/kendo.grid.min.js")"></script>
    <script type="text/javascript" src="@Url.Content("~/Scripts/jquery.maskedinput.js")"></script>
    <script type="text/javascript" src="@Url.Content("~/Scripts/jquery.meio.mask.js")"></script>
    <script type="text/javascript" src="@Url.Content("~/Scripts/Shared/SelecionarFornecedor.js")"></script>
    <script type="text/javascript" src="@Url.Content("~/Scripts/Shared/SelecionarCliente.js")"></script>
    <script type="text/javascript" src="@Url.Content("~/Scripts/Shared/SelecionarProduto.js")"></script>
    <script type="text/javascript">

        // array das linhas
        var linhasAdicionadas = new Array();
        var quantidadeDeFornecedoresIniciais = 0;
        var indiceEdicao = -1;
        var status = 0;
        var simular = "S";
        var gravar = "G";
        var numeroDeItensInseridos = 0;

        function carregarAreasDeVenda(idDoCliente, callBack) {
            ///<param name="callBack">funcao para executar alguma ação após carregar as áreas de venda. Por exemplo, setar um valor</param>
            var comboDeAreaDeVenda = $('#AreaDeVenda');
            comboDeAreaDeVenda  
                .val('')
                .change();

            $.ajax({
                url: '@Url.Action("ListarPorCliente", "AreaDeVenda")' + '/?idDoCliente='  + idDoCliente ,
                type: 'GET',
                cache: false,
                contentType: "application/json; charset=utf-8",
                dataType: 'json',
                success: function(data) {
                    if (data.Sucesso) {
                        
                        comboDeAreaDeVenda.children(':not(:first)').remove();
                        $.each(data.areasDeVenda, function(indice, areaDeVenda) {
                            comboDeAreaDeVenda.append('<option value="' + areaDeVenda.Id + '">' + areaDeVenda.Descricao + '</option>');
                        });

                        if (callBack) {
                            callBack();
                        }

                    } else {
                        Mensagem.ExibirMensagemDeErro('Ocorreu um erro ao consultar as Áreas de Venda do cliente. Detalhe: ' + data.Mensagem);
                    }

                },
                error: function(jqXHR, textStatus, errorThrown) {
                    Mensagem.ExibirMensagemDeErro('Ocorreu um erro ao consultar as Áreas de Venda do cliente. Detalhe: ' + errorThrown);
                }
            });

        }

        function carregarIncoterm2(incoterm1, callBack) {
            $.ajax({
                url: '@Url.Action("ListarIncotermsDoCabecalho", "Incoterm")' + '/?idDoCabecalho=' + incoterm1,
                type: 'GET',
                cache: false,
                contentType: "application/json; charset=utf-8",
                dataType: 'json',
                success: function (data) {
                    if (data.Sucesso) {
                        var comboDeIncoterm2 = $('#Inco2');

                        comboDeIncoterm2.children(':not(:first)').remove();
                        $.each(data.incoterms, function (indice, incoterm) {
                            comboDeIncoterm2.append('<option value="' + incoterm.Id + '">' + incoterm.IncotermLinha + '</option>');
                        });

                        if (callBack) {
                            callBack();
                        }

                    } else {
                        Mensagem.ExibirMensagemDeErro('Ocorreu um erro ao consultar o incoterm 2. Detalhe: ' + data.Mensagem);
                    }

                },
                error: function (jqXHR, textStatus, errorThrown) {
                    Mensagem.ExibirMensagemDeErro('Ocorreu um erro ao consultar o incoterm 2. Detalhe: ' + errorThrown);
                }
            });

        }

        $(function() {
            aplicaMascaraData();
            aplicaMascaraQuantidade();

            var selecionarTransportadora = new SelecionarFornecedor();

            var funcaoParaRetornarCamposDaBuscaDeTransportadora = function () {
                var transportadoraSelecionada = selecionarTransportadora.fornecedorSelecionado;
                $("#Transportadora_Id").val(transportadoraSelecionada.Id);
                $("#Transportadora_Codigo").val(transportadoraSelecionada.Codigo);
                $("#Transportadora_Nome").val(transportadoraSelecionada.Nome);
            };

            selecionarTransportadora.configurarJanelaModal("#Transportadora_Id", "divSelecionarTransportadora", "#btnSelecionarTransportadora", funcaoParaRetornarCamposDaBuscaDeTransportadora);

            var selecionarTransportadoraDeRedespacho = new SelecionarFornecedor();

            var funcaoParaRetornarCamposDaBuscaDeTransportadoraDeRedespacho = function () {
                var transportadoraSelecionada = selecionarTransportadoraDeRedespacho.fornecedorSelecionado;
                $("#TransportadoraDeRedespacho_Id").val(transportadoraSelecionada.Id);
                $("#TransportadoraDeRedespacho_Codigo").val(transportadoraSelecionada.Codigo);
                $("#TransportadoraDeRedespacho_Nome").val(transportadoraSelecionada.Nome);
            };

            selecionarTransportadoraDeRedespacho.configurarJanelaModal("#TransportadoraDeRedespacho_Id", "divSelecionarTransportadoraDeRedespacho", "#btnSelecionarTransportadoraDeRedespacho", funcaoParaRetornarCamposDaBuscaDeTransportadoraDeRedespacho);

            var selecionarTransportadoraDeRedespachoCif = new SelecionarFornecedor();

            var funcaoParaRetornarCamposDaBuscaDeTransportadoraDeRedespachoCif = function () {
                var transportadoraSelecionada = selecionarTransportadoraDeRedespachoCif.fornecedorSelecionado;
                $("#TransportadoraDeRedespachoCif_Id").val(transportadoraSelecionada.Id);
                $("#TransportadoraDeRedespachoCif_Codigo").val(transportadoraSelecionada.Codigo);
                $("#TransportadoraDeRedespachoCif_Nome").val(transportadoraSelecionada.Nome);
            };

            selecionarTransportadoraDeRedespachoCif.configurarJanelaModal("#TransportadoraDeRedespachoCif_Id", "divSelecionarTransportadoraDeRedespachoCif", "#btnSelecionarTransportadoraDeRedespachoCif", funcaoParaRetornarCamposDaBuscaDeTransportadoraDeRedespachoCif);

            var selecionarCliente = new SelecionarCliente();
            var funcaoParaRetornarCamposDaBuscaDeCliente = function() {
                var clienteSelecionado = selecionarCliente.clienteSelecionado;
                var codigoDoCliente = $('#Cliente_Codigo').val();
                if (codigoDoCliente != clienteSelecionado.Codigo) {
                    carregarAreasDeVenda(clienteSelecionado.Codigo);
                }
                $('#Cliente_Id').val(clienteSelecionado.Id);
                $('#Cliente_Codigo').val(clienteSelecionado.Codigo);
                $('#Cliente_Nome').val(clienteSelecionado.Nome);
                $('#Cliente_Cnpj').val(clienteSelecionado.Cnpj || clienteSelecionado.Cpf);
                $('#Cliente_Telefone').val(clienteSelecionado.Telefone);

            };
            selecionarCliente.configurarJanelaModal('#Cliente_Id', 'divSelecionarCliente', "#btnBuscarCliente", funcaoParaRetornarCamposDaBuscaDeCliente);

            var selecionarProduto = new SelecionarProduto();

            var funcaoParaPreencherOsDadosDeRetornoDoProduto = function () {
                var produtoSelecionado = selecionarProduto.produtoSelecionado;
                $('#IdDoMaterial').val(produtoSelecionado.Id);
                $('#CodigoDoMaterial').val(produtoSelecionado.Id_material);
                $('#NomeDoMaterial').val(produtoSelecionado.Descricao);
                $('#CodigoUnidadeMedida').val(produtoSelecionado.UnidadeMedida);
            };

            selecionarProduto.configurarJanelaModal('#IdDoMaterial', 'divSelecionarProduto', '#btnBuscaMaterial','#id_centro', funcaoParaPreencherOsDadosDeRetornoDoProduto);

            $('#AreaDeVenda').change(function() {
                var areaDeVendaSelecionada = $(this).val();
                if (areaDeVendaSelecionada) {
                    var valoresDaAreaDeVenda = $(this).find(':selected').text().split('-');
                    $('#id_centro').val(valoresDaAreaDeVenda[0]);
                } else {
                    $('#id_centro').val('');
                }
            });

            @if (Model != null)
            {
                //vai entrar aqui quando estiver carregando um pedido que já foi salvo
                @:carregarAreasDeVenda($('#Cliente_Codigo').val(), function() {
                    @:$('#AreaDeVenda')
                        @:.val('@Model.IdDaAreaDeVenda')
                        @:.change();
                @:});

                @:carregarIncoterm2($('#Inco1').val(), function() {
                    @:$('#Inco2').val('@Model.IdDoIncoterm2');
                @:});

                @:$('#btnGravar').val('Gravar Edição');
                @:$('#btnSimular').val('Simular Edição');
                
            }


            $('#Inco1').change(function () {
                var incoterm1 = $(this).val();
                if (incoterm1) {
                    carregarIncoterm2(incoterm1);
                }
            });

            function atualizaGrid() {
                var grid = $("#gridLinhasAdicionadas").data("kendoGrid");
                grid.dataSource.read();
            }

            // Finaliza a edicao na linha do grid
            function encerrarEdicao() {
                indiceEdicao = -1;
                $('#btnAdicionarItem').val('Adicionar');
                $('#btnCancelarEdicao').hide();
            }

            $('#btnCancelarEdicao').click(function() {
                encerrarEdicao();
            });

            // Adiciona linha ao grid
            $('#btnAdicionarItem').click(function() {
                var form = $('form');
                if (!$(form).validate().form()) {
                    return;
                }

                numeroDeItensInseridos++;
                var codigoDoMotivoDeRecusa = $('#CodigoDoMotivoDeRecusa :selected').val();

                // grava a linha no array de fornecedor
                // Array que sera enviado para o controller que salva os pedidos
                var fornecedor = {
                    NumeroDoItem: numeroDeItensInseridos * 10,
                    IdMaterial: $('#IdDoMaterial').val(),
                    CodigoMaterial: $('#CodigoDoMaterial').val(),
                    DescricaoMaterial: $('#NomeDoMaterial').val(),
                    UnidadeDeMedida: $('#CodigoUnidadeMedida').val(),
                    Quantidade: $('#Quant').val(),
                    listpre: $('#CodigoDaListaDePreco :selected').val(),
                    Descricaolistpre: $('#CodigoDaListaDePreco :selected').text(),
                    Desconto: $('#descma').val(),
                    CodigoDoMotivoDeRecusa: codigoDoMotivoDeRecusa ? codigoDoMotivoDeRecusa : null,
                    DescricaoDoMotivoDeRecusa: codigoDoMotivoDeRecusa ? $('#CodigoDoMotivoDeRecusa :selected').text() : null
                };

                // grava na variavel linhasAdicionadas os dados que seram manipulados antes de serem salvos
                if (indiceEdicao == -1) {
                    linhasAdicionadas.push(fornecedor);

                } else {
                    // array que sera exibido no grid
                    linhasAdicionadas[indiceEdicao] = fornecedor;
                    encerrarEdicao();
                }

                atualizaGrid();
            });

            // exibe os valores no grid 
            // quota. campo
            $('#gridLinhasAdicionadas').customKendoGrid({
                dataSource: {
                    schema: {
                        data: function() { return linhasAdicionadas; },
                        model: {
                            id: 'Codigo',
                            fields: {
                                NumeroDoItem: { type: "number" },
                                Status: { type: "string" },
                                IdMaterial:{type:"number"},
                                CodigoMaterial: { type: "string" },
                                DescricaoMaterial: { type: "string" },
                                Quantidade: { type: "number" },
                                listpre: { type: "string" },
                                Descricaolistpre: { type: "string" },
                                Desconto: { type: "number" },
                                ValorTabela: { type: "number" },
                                ValorPolitica: { type: "number" },
                                CodigoDoMotivoDeRecusa: { type: "string" },
                                DescricaoDoMotivoDeRecusa: { type: "string" }
                            }
                        }
                    }
                },
                sortable: false,
                columns:
                [
                    {
                        title: ' ', 
                        width: 20,
                        template: '<input type="button" class="button_edit"></input>'
                    },
                    {
                        title: ' ',
                        width: 20,
                        template: '<input type="button" class="button_remove"></input>'
                    },
                    {
                        width: 30,
                        field:"NumeroDoItem",
                        title: "Item"
                    },

                    {
                        width: 45,
                        title: "Status"
                    },
                    {
                        field: "CodigoMaterial",
                        width: 45,
                        title: "Código"
                    },
                    {
                        field: "DescricaoMaterial",
                        width: 150,
                        title: "Material"
                    },
                    {
                        width: 45,
                        field: "Quantidade",
                        title: "Quantidade"
                    },
                    {
                        field: "Descricaolistpre",
                        width: 50,
                        title: "Lista"
                    },
                    {
                        field: "Desconto",
                        width: 45,
                        title: "Desconto Manual",
                        template: function(dataItem) {
                            return dataItem.Desconto ? dataItem.Desconto : "";
                        }
                    },
                    {
                        field: "ValorTabela",
                        width: 45,
                        title: "Tabela"
                    },
                    {
                        field: "ValorPolitica",
                        width: 45,
                        title: "Política"
                    },
                    {
                        width: 45,
                        title: "Condições",
                        template: '<input type="button" class="button_information"></input>'
                    },
                    {
                        field: "DescricaoDoMotivoDeRecusa",
                        width: 75,
                        title: "Motivo de Recusa"
                    }


                ]
            });

            function enviarPedido(acao, mensagemDeSucesso) {

                if (quantidadeDeFornecedoresIniciais == 0 && linhasAdicionadas.length == 0) {
                    Mensagem.ExibirMensagemDeErro('Deve ser adicionado pelo menos um Item antes de salvar.');
                    return;
                }

                var pedido = {
                    IdDoPedido: $('#id_pedido').val(),
                    tipo: acao,
                    CodigoTipoPedido: $('#CodigoTipoPedido').val(),
                    CodigoDaCondicaoDePagamento: $('#condpgto').val(),
                    DataDoPedido: $('#datap').val(),
                    NumeroPedido: $('#id_pedido').val(),
                    CodigoDaTransportadora: $('#Transportadora_Codigo').val(),
                    CodigoDaTransportadoraDeRedespacho: $('#TransportadoraDeRedespacho_Codigo').val(),
                    CodigoDaTransportadoraDeRedespachoCif: $('#TransportadoraDeRedespachoCif_Codigo').val(),
                    Cliente: $('#id_cliente').val(),
                    IdDaAreaDeVenda: $('#AreaDeVenda').val(),
                    Centro: $('#id_centro').val(),
                    Inco1: $('#Inco1').val(),
                    Inco2: $('#Inco2 :selected').text(),
                    Observacao: $('#obs').val()
                };

                // Grava no array os dados que serão salvos
                var itens = new Array();
                $.each(linhasAdicionadas, function (indice, item) {
                    itens.push({
                        IdMaterial: item.IdMaterial,
                        Quantidade: item.Quantidade,
                        listapreco: item.listpre,
                        Desconto: item.Desconto,
                        CodigoDoMotivoDeRecusa: item.CodigoDoMotivoDeRecusa
                    });
                });

                pedido.Itens = itens;

                //
                // Chamada do Controller reponsalvel por salvar o pedido.                
                $.ajax({
                    url: '@Url.Action("Salvar", "PedidoVendaSalvar")',
                    type: 'POST',
                    cache: false,
                    data: JSON.stringify({ Pedido: pedido }),
                    contentType: "application/json; charset=utf-8",
                    dataType: 'json',
                    success: function (data) {
                        if (data.Sucesso) {
                            Mensagem.ExibirMensagemDeSucesso(mensagemDeSucesso);
                            quantidadeDeFornecedoresIniciais = linhasAdicionadas.length;
                            return;
                        } else {
                            Mensagem.ExibirMensagemDeErro(data.Mensagem + ' Erro ao Inserir os itens');
                        }

                    },
                    error: function (jqXHR, textStatus, errorThrown) {
                        Mensagem.ExibirMensagemDeErro('Ocorreu um erro ao enviar o Pedido para o SAP. Detalhe: ' + textStatus + errorThrown);
                    }
                });

            }

            // botao de remover a linha do grid
            $('#gridLinhasAdicionadas').find('.button_remove').die('click');

            // funcao do botao de remover a linha do grid
            $('#gridLinhasAdicionadas').find('.button_remove').live('click', function() {
                var indice = $(this).parents('tr:first')[0].rowIndex;
                linhasAdicionadas.splice(indice, 1);
                atualizaGrid();
            });

            // botao de adicionar linha ao grid
            $('#gridLinhasAdicionadas').find('.button_edit').die('click');

            // funcao de adicionar linha ao grid
            $('#gridLinhasAdicionadas').find('.button_edit').live('click', function() {
                indiceEdicao = $(this).parents('tr:first')[0].rowIndex;
                var item = linhasAdicionadas[indiceEdicao];

                $('#IdDoMaterial').val(item.IdMaterial);
                $('#CodigoDoMaterial').val(item.CodigoMaterial);
                $('#Quant').val(item.Quantidade);
                $('#CodigoUnidadeMedida').val(item.UnidadeDeMedida);
                $('#CodigoDaListaDePreco').val(item.listpre);
                $('#descma').val(item.Desconto ? item.Desconto : '');

                $('#btnAdicionarItem').val('Atualizar');
                $('#btnCancelarEdicao').show();
            });

            $('#gridLinhasAdicionadas').find('.button_information').die('click');

            $('#gridLinhasAdicionadas').find('.button_information').live('click', function () {

                Mensagem.ExibirMensagemDeErro('A tela para visualizar as condições de preço ainda não foi construída.');

            });

            $('#btnSimular').click(function() {
                enviarPedido(simular, "O Pedido foi simulado com sucesso.");
            });

            $('#btnGravar').click(function() {
                enviarPedido(gravar, "O Pedido foi gravado com sucesso.");
            });

            function habilitarCampoData() {
                $('#Data')
                    .attr('readonly', false)
                    .removeClass('campoDesabilitado')
                    .val('');

                $("#Data").datepicker();
            }

            $('#btnNovo').click(function() {
                habilitarCampoData();
                linhasAdicionadas = [];
                numeroDeItensInseridos = 0;
            });

            //
            // Funcao do Botao que copia os dados de uma cotacao para tela.
            // 
            $('#btnCopiar').click(function() {
                // Grava o o numero da cotacao
                var id_cotacao = $('#id_cotacao').val();


                // Verifica se foi digitado o numero da Cotacao
                if (id_cotacao == 0) {
                    Mensagem.ExibirMensagemDeErro('Deve ser digito o numero da Cotação para a pesquisa.');
                    return;
                }
                // limpa o valor dos campos para depois carregar os dados da cotacao pesquisada
                $('#btnNovo').click();

                //
                // Chamada do Controller reponsalvel por copiar o Cabecalho da cotacao.
                $.ajax({
                    url: '@Url.Action("ConsultarCotacao", "PedidoVenda")',
                    type: 'POST',
                    cache: false,
                    data: JSON.stringify({ cotacao: id_cotacao }),
                    contentType: "application/json; charset=utf-8",
                    dataType: 'json',
                    success: function(data) {

                        //$('#divSelecionarFornecedor').val(data.trans);
                        var status_gravado = "Gravado";
                        var status_simulacao = "Simulação";

                        // Valida o Status
                        if (data.Tipo == "G") {
                            //Mensagem.ExibirMensagemDeErro("Gravado");
                            $('#status').val(status_gravado);
                        }

                        if (data.Tipo == "S") {
                            //Mensagem.ExibirMensagemDeErro("Simualado");
                            $('#status').val(status_simulacao);
                        }

                        // Executa a função que carrega os fornecedores.
                        if (data.trans != 0) {
                            SelecionarFornecedor.retornaFornecedor(data.trans, "trans");
                        }

                        if (data.transred != 0) {
                            SelecionarFornecedor.retornaFornecedor(data.transred, "transred");
                        }

                        if (data.transredcif != 0) {
                            SelecionarFornecedor.retornaFornecedor(data.transredcif, "transredcif");
                        }

                        $('#CodigoTipoPedido').val(data.CodigoTipoPedido);
                        $('#condpgto').val(data.condpgto);
                        $('#datap').val(data.datap);
                        $('#id_pedido').val(data.id_pedido);
                        $('#trans').val(data.trans);
                        $('#transred').val(data.transred);
                        $('#transredcif').val(data.transredcif);
                        $('#id_cliente').val(data.id_cliente);
                        $('#id_centro').val(data.id_centro);
                        $('#Inco1').val(data.inco1);
                        $('#Inco2').val(data.inco2);
                        $('#obs').val(data.obs);


//
                        // alterar mais tarde pelo id_cotacao (Caso encontra dados no cabecalho, carregas as linhas do pedido do representante                                              
                        var cotacao = $('#CodigoTipoPedido').val();
                        if (cotacao != "") {
                            //
                            // Chamada do Controller reponsalvel por copiar as linhas da cotacao gravando no Grid.
                            $.ajax({
                                url: '@Url.Action("ConsultarLinhasCotacao", "PedidoVenda")' + '?cotacao=' + id_cotacao,
                                type: 'POST',
                                //cache: false,
                                data: JSON.stringify({ dados: id_cotacao }),
                                contentType: "application/json",
                                //dataType: 'json',
                                success: function(data) {
                                    $.each(data, function(index, value) {

                                        $('#Id_material').val(value.id_material);
                                        $('#Quant').val(value.Quant);
                                        $('#CodigoDaListaDePreco').val(value.listpre);
                                        $('#descma').val(value.descma);

                                        $('#btnAdicionarItem').click();

                                    });

                                },
                                error: function(jqXHR, textStatus, errorThrown) {
                                    Mensagem.ExibirMensagemDeErro('Ocorreu um erro ao consultar as Linhas da Contacao: ' + textStatus + errorThrown);
                                }
                            });
                        } else {
                            Mensagem.ExibirMensagemDeErro("A Cotacao consultada não foi encontrada.");
                        }

                    },
                    error: function(jqXHR, textStatus, errorThrown) {
                        Mensagem.ExibirMensagemDeErro('Ocorreu um erro ao consultar os dados da Contacao: ' + textStatus + errorThrown);
                    }
                });
            });

        });
    </script>

}